CREATE DATABASE patshala;                                   

CREATE TABLE user (
    id INT AUTO_INCREMENT,
    name CHAR(30),
    email VARCHAR(40) NOT NULL UNIQUE,
    password VARCHAR(15),
    phone_number BIGINT(15),
    time_stamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);


CREATE TABLE courses (
    c_id INT AUTO_INCREMENT,
    c_name CHAR(30) NOT NULL,
    c_image VARCHAR(50) NOT NULL,
    price BIGINT(10) NOT NULL,
    description TEXT NOT NULL,
    PRIMARY KEY (c_id)
);


CREATE TABLE enroll (
    id INT AUTO_INCREMENT,
    total BIGINT(50),
    uid INT(50),
    PRIMARY KEY (id)
);


CREATE TABLE enroll_details (
    id INT AUTO_INCREMENT,
    oid INT(50) NOT NULL,
    c_id INT(50),
    PRIMARY KEY (id)
);

CREATE TABLE cart (
    id INT AUTO_INCREMENT,
    user_id INT NOT NULL,
    course_id INT NOT NULL,
    quantity INT DEFAULT 1,
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES user(id),
    FOREIGN KEY (course_id) REFERENCES courses(c_id)
);

CREATE TABLE orders (
    id INT AUTO_INCREMENT,
    user_id INT NOT NULL,
    total_amount BIGINT NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES user(id)
);


CREATE TABLE order_details (
    id INT AUTO_INCREMENT,
    order_id INT NOT NULL,
    course_id INT NOT NULL,
    price BIGINT NOT NULL,
    quantity INT DEFAULT 1,
    PRIMARY KEY (id),
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (course_id) REFERENCES courses(c_id)
);


CREATE TABLE reviews (
    id INT AUTO_INCREMENT,
    user_id INT NOT NULL,
    course_id INT NOT NULL,
    rating INT CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES user(id),
    FOREIGN KEY (course_id) REFERENCES courses(c_id)
);


CREATE TABLE wishlist (
    id INT AUTO_INCREMENT,
    user_id INT NOT NULL,
    course_id INT NOT NULL,
    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES user(id),
    FOREIGN KEY (course_id) REFERENCES courses(c_id)
);


CREATE TABLE payment (
    id INT AUTO_INCREMENT,
    order_id INT NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    payment_status VARCHAR(20) DEFAULT 'Pending',
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    FOREIGN KEY (order_id) REFERENCES orders(id)
);